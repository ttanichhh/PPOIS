#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –º–æ–¥—É–ª–µ–π
"""

import sys
import os

sys.path.insert(0, os.path.abspath('..'))

from support.discount import Discount
from support.promotion import Promotion
from support.review import Review
from support.shift import Shift

from core.customer import Customer
from core.employee import Employee
from core.order import Order
from datetime import datetime


class TestRemainingModules:
    """–¢–µ—Å—Ç—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–¥—É–ª–µ–π"""

    def test_discount_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–∫–∏–¥–∫–∞–º–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É–¥—É—â—É—é –¥–∞—Ç—É –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        discount = Discount(1, "SUMMER25", "percentage", 25.0, "2024-12-31", 50.0)

        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
        # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ assert, –ø—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")
        order = Order(1, customer)
        order.total_amount = 100.0

        # –¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
        discount_amount = discount.apply_discount(order)
        assert discount_amount == 25.0  # 25% –æ—Ç $100

        print("‚úÖ Discount operations - PASSED")

    def test_promotion_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞–∫—Ü–∏—è–º–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        promotion = Promotion(1, "Summer Special", "Summer discount",
                              "percentage", 15.0, "2024-06-01", "2024-12-31")

        # –í–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        assert promotion.name == "Summer Special"
        assert promotion.discount_value == 15.0
        assert promotion.discount_type == "percentage"

        print("‚úÖ Promotion operations - PASSED")

    def test_review_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Ç–∑—ã–≤–∞–º–∏"""
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")
        review = Review(1, customer, 5, "Excellent service!", "2024-01-20")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        review.add_response("Thank you for your feedback!")
        assert review.response == "Thank you for your feedback!"

        # –¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ
        review.mark_as_verified()
        assert review.is_verified == True

        print("‚úÖ Review operations - PASSED")

    def test_shift_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–º–µ–Ω–∞–º–∏"""
        shift = Shift(1, "09:00", "17:00", "day")
        employee = Employee(1, "Test Employee", "+123456789", "employee@test.com",
                            "Waiter", 30000, "2024-01-01")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–º–µ–Ω—É
        success = shift.add_employee(employee)
        assert success == True
        assert employee in shift.employees

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã
        duration = shift.get_duration_hours()
        assert duration == 8.0

        print("‚úÖ Shift operations - PASSED")


if __name__ == "__main__":
    test_instance = TestRemainingModules()

    test_methods = [method for method in dir(test_instance)
                    if method.startswith('test_') and callable(getattr(test_instance, method))]

    for method_name in sorted(test_methods):
        try:
            method = getattr(test_instance, method_name)
            method()
            print(f"üéØ {method_name} - PASSED")
        except Exception as e:
            print(f"‚ùå {method_name} - FAILED: {str(e)}")