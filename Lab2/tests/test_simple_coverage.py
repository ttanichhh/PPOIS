#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 85% –ø–æ–∫—Ä—ã—Ç–∏—è
"""

import sys
import os

sys.path.insert(0, os.path.abspath('..'))

from services.reporting_service import ReportingService
from services.ordering_service import OrderingService
from management.customer_management import CustomerManagement
from management.employee_management import EmployeeManagement
from utils.report import ReportGenerator

from core.restaurant import Restaurant
from core.customer import Customer
from core.employee import Employee
from core.menu import Menu, MenuItem, MenuCategory
from support.address import Address


class TestSimpleCoverage:
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è"""

    def test_reporting_service_simple(self):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
        address = Address("Test St", "Test City", "12345")
        restaurant = Restaurant(1, "Test Restaurant", address, "123", "Test")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")
        restaurant.add_customer(customer)

        reporting_service = ReportingService(restaurant)

        # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–µ–∑ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        assert reporting_service.restaurant == restaurant
        assert len(reporting_service.scheduled_reports) == 0

        # –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        reporting_service.schedule_automatic_report("daily", "daily", ["test@test.com"])
        assert len(reporting_service.scheduled_reports) == 1

        print("‚úÖ Reporting service simple - PASSED")

    def test_ordering_service_simple(self):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–æ–≤"""
        menu_item = MenuItem(1, "Test Item", "Test description", 25.0, "Main", 15)
        menu = Menu(1, "Test Menu", "Test menu")
        category = MenuCategory(1, "Test Category", "Test category", 1)
        category.add_menu_item(menu_item)
        menu.add_category(category)

        ordering_service = OrderingService(menu)
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")

        # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        order = ordering_service.create_order(customer)
        assert order.customer == customer

        # –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ (–ë–ï–ó –ü–†–ò–ß–ò–ù–´)
        ordering_service.cancel_order(order)  # ‚Üê –¢–æ–ª—å–∫–æ 1 –∞—Ä–≥—É–º–µ–Ω—Ç
        assert order.status == "cancelled"

        print("‚úÖ Ordering service simple - PASSED")

    def test_management_simple(self):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–æ–¥—É–ª–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # Customer Management
        customer_mgmt = CustomerManagement()
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")
        customer_mgmt.register_customer(customer)

        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ
        customer_mgmt.send_promotion(customer, "Test promotion")

        # Employee Management
        emp_mgmt = EmployeeManagement()
        employee = Employee(1, "Test Employee", "+111111111", "employee@test.com",
                            "Waiter", 30000, "2024-01-01")
        emp_mgmt.hire_employee(employee)

        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
        salary = emp_mgmt.calculate_payroll(employee, 160)
        assert salary > 0

        print("‚úÖ Management simple - PASSED")

    def test_report_generator_simple(self):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        address = Address("Test St", "Test City", "12345")
        restaurant = Restaurant(1, "Test Restaurant", address, "123", "Test")
        report_generator = ReportGenerator(restaurant)

        # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        assert report_generator.restaurant == restaurant
        assert len(report_generator.generated_reports) == 0

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ ID
        report = report_generator.get_report_by_id(1)
        assert report is None

        print("‚úÖ Report generator simple - PASSED")


if __name__ == "__main__":
    test_instance = TestSimpleCoverage()

    test_methods = [method for method in dir(test_instance)
                    if method.startswith('test_') and callable(getattr(test_instance, method))]

    for method_name in sorted(test_methods):
        try:
            method = getattr(test_instance, method_name)
            method()
            print(f"üéØ {method_name} - PASSED")
        except Exception as e:
            print(f"‚ùå {method_name} - FAILED: {str(e)}")