"""
–¢–µ—Å—Ç—ã –¥–ª—è financial –º–æ–¥—É–ª–µ–π
"""

import sys
import os

sys.path.insert(0, os.path.abspath('..'))

from financial.payment import PaymentProcessor
from financial.expense import ExpenseTracker, Expense
from financial.revenue import RevenueManager, Revenue
from financial.tax import TaxCalculator, Tax
from financial.bill import BillGenerator, Bill
from financial.payroll import PayrollSystem, Payroll

from core.order import Order
from core.customer import Customer
from core.employee import Employee
from support.payment import Payment
from exceptions.restaurant_exceptions import PaymentException
from core.menu import MenuItem
from core.order import OrderItem


class TestFinancialModules:
    """–¢–µ—Å—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""

    def test_payment_processor_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        processor = PaymentProcessor()
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")
        order = Order(1, customer)
        order.total_amount = 100.0
        payment = Payment(1, order, 100.0, "credit_card")

        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        result = processor.process_payment_transaction(payment)
        assert result == True
        assert len(processor.processed_payments) == 1

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        fee = processor.calculate_processing_fee(payment)
        assert fee == 3.0  # 3% –¥–ª—è credit_card

        print("‚úÖ Payment processor operations - PASSED")

    def test_expense_tracker_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Ç—Ä–µ–∫–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        tracker = ExpenseTracker()
        expense = Expense(1, "food", 500.0, "2024-01-20", "Weekly groceries")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        tracker.add_expense(expense)
        assert len(tracker.expenses) == 1

        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞
        tracker.set_budget("food", 2000.0)
        assert tracker.budget_categories["food"] == 2000.0

        print("‚úÖ Expense tracker operations - PASSED")

    def test_revenue_manager_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤"""
        manager = RevenueManager()
        revenue = Revenue(1, "dine_in", 1000.0, "2024-01-20")

        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–∞
        manager.record_revenue(revenue)
        assert len(manager.revenue_streams) == 1

        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏ –ø–æ –¥–æ—Ö–æ–¥—É
        manager.set_revenue_goal("2024-01", 50000.0)
        assert manager.revenue_goals["2024-01"] == 50000.0

        print("‚úÖ Revenue manager operations - PASSED")

    def test_tax_calculator_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞–ª–æ–≥–æ–≤"""
        calculator = TaxCalculator()
        tax = Tax(1, "Sales Tax", 8.5, ["general"])

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        calculator.add_tax_rate(tax)
        assert len(calculator.tax_rates) == 1

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–∞
        tax_amount = calculator.calculate_tax(100.0)
        assert tax_amount == 8.5

        print("‚úÖ Tax calculator operations - PASSED")

    def test_bill_generator_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—á–µ—Ç–æ–≤"""
        tax_calculator = TaxCalculator()
        tax = Tax(1, "Sales Tax", 8.5, ["general"])
        tax_calculator.add_tax_rate(tax)

        generator = BillGenerator(tax_calculator)
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        order = Order(1, customer)
        menu_item = MenuItem(1, "Test Item", "Test description", 25.0, "Main", 15)
        order_item = OrderItem(menu_item, 2)  # 2 items –ø–æ $25 = $50
        order.add_item(order_item)

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–∞
        bill = generator.generate_bill(order)
        assert bill.order == order
        assert bill.total_amount > 0  # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0

        print("‚úÖ Bill generator operations - PASSED")


if __name__ == "__main__":
    test_instance = TestFinancialModules()

    test_methods = [method for method in dir(test_instance)
                    if method.startswith('test_') and callable(getattr(test_instance, method))]

    for method_name in sorted(test_methods):
        try:
            method = getattr(test_instance, method_name)
            method()
            print(f"üéØ {method_name} - PASSED")
        except Exception as e:
            print(f"‚ùå {method_name} - FAILED: {str(e)}")