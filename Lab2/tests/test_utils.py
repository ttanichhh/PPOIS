"""
–¢–µ—Å—Ç—ã –¥–ª—è utils –º–æ–¥—É–ª–µ–π
"""

import sys
import os

sys.path.insert(0, os.path.abspath('..'))

from utils.validation import ValidationUtils
from utils.notification import NotificationService, Notification
from utils.loyalty import LoyaltyManager, Reward
from utils.report import ReportGenerator, Report
from utils.security import SecurityManager, UserAccount

from core.restaurant import Restaurant
from core.customer import Customer
from core.employee import Employee
from support.address import Address
from exceptions.restaurant_exceptions import ValidationException, CustomerException


class TestUtilsModules:
    """–¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""

    def test_validation_utils_comprehensive(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
        assert ValidationUtils.validate_email("valid@example.com") == True

        try:
            ValidationUtils.validate_email("invalid")
            assert False, "Should have raised ValidationException"
        except ValidationException:
            pass

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        assert ValidationUtils.validate_phone("+1234567890") == True

        try:
            ValidationUtils.validate_phone("abc")
            assert False, "Should have raised ValidationException"
        except ValidationException:
            pass

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
        assert ValidationUtils.validate_date("2024-01-20") == True

        try:
            ValidationUtils.validate_date("invalid-date")
            assert False, "Should have raised ValidationException"
        except ValidationException:
            pass

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
        assert ValidationUtils.validate_password_strength("StrongPass123") == True

        try:
            ValidationUtils.validate_password_strength("weak")
            assert False, "Should have raised ValidationException"
        except ValidationException:
            pass

        print("‚úÖ Validation utils comprehensive - PASSED")

    def test_notification_service_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notification_service = NotificationService()
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –æ–±—ä–µ–∫—Ç Reservation –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        from support.reservation import Reservation
        from core.table import Table
        table = Table(1, 4, "Window")
        reservation = Reservation(1, customer, table, "2024-12-31 19:00", 4)

        # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification = notification_service.send_reservation_confirmation(customer, reservation)
        assert notification.recipient == customer
        assert notification.notification_type == "reservation_confirmation"

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        unread = notification_service.get_unread_notifications(customer)
        assert len(unread) == 1

        # –¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
        notification_service.mark_as_read(notification.notification_id)
        unread_after = notification_service.get_unread_notifications(customer)
        assert len(unread_after) == 0

        print("‚úÖ Notification service operations - PASSED")

    def test_loyalty_manager_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        loyalty_manager = LoyaltyManager()
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")

        reward1 = Reward(1, "Free Coffee", 50, "Get a free coffee")
        reward2 = Reward(2, "50% Discount", 100, "50% off your next order")

        loyalty_manager.add_reward(reward1)
        loyalty_manager.add_reward(reward2)

        # –¢–µ—Å—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥)
        customer.add_loyalty_points(75)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ Customer –≤–º–µ—Å—Ç–æ LoyaltyManager
        assert customer.loyalty_points == 75

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
        available_rewards = loyalty_manager.get_available_rewards(customer)
        assert len(available_rewards) == 1  # Only reward1 is affordable

        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–ª–∏–µ–Ω—Ç–∞
        customer.loyalty_points = 600
        loyalty_manager.update_customer_tier(customer)
        assert customer.membership_tier == "Silver"

        print("‚úÖ Loyalty manager operations - PASSED")

    def test_report_generator_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        address = Address("Test St", "Test City", "12345")
        restaurant = Restaurant(1, "Test Restaurant", address, "123", "Test")
        report_generator = ReportGenerator(restaurant)

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂
        sales_report = report_generator.generate_sales_report("2024-01-01", "2024-01-31")
        assert sales_report.report_type == "sales_report"
        assert "total_sales" in sales_report.content

        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        inventory_report = report_generator.generate_inventory_report()
        assert inventory_report.report_type == "inventory_report"

        print("‚úÖ Report generator operations - PASSED")

    def test_security_manager_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_manager = SecurityManager()

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = security_manager.create_user("testuser", "test@test.com", "manager", "SecurePass123")
        assert user.username == "testuser"
        assert user.role == "manager"

        # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        authenticated_user = security_manager.authenticate_user("testuser", "SecurePass123")
        assert authenticated_user == user

        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        security_manager.log_activity(user, "login", "User logged in")
        assert len(security_manager.audit_log) == 1

        print("‚úÖ Security manager operations - PASSED")


if __name__ == "__main__":
    test_instance = TestUtilsModules()

    test_methods = [method for method in dir(test_instance)
                    if method.startswith('test_') and callable(getattr(test_instance, method))]

    for method_name in sorted(test_methods):
        try:
            method = getattr(test_instance, method_name)
            method()
            print(f"üéØ {method_name} - PASSED")
        except Exception as e:
            print(f"‚ùå {method_name} - FAILED: {str(e)}")