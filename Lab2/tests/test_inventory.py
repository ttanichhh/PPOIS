#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è inventory –º–æ–¥—É–ª–µ–π
"""

import sys
import os

sys.path.insert(0, os.path.abspath('..'))

from inventory.inventory import InventoryItem
from inventory.supplier import Supplier
from inventory.ingredient import Ingredient
from inventory.recipe import Recipe
from inventory.equipment import CookingEquipment
from inventory.kitchen import Kitchen

from support.address import Address
from core.employee import Chef
from exceptions.restaurant_exceptions import InventoryException


class TestInventoryModules:
    """–¢–µ—Å—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""

    def test_inventory_item_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º"""
        item = InventoryItem(1, "Flour", "Baking", 100, "kg", 20, 2.5)

        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        item.update_quantity(80)
        assert item.quantity == 80

        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        assert item.needs_restocking() == False

        item.update_quantity(15)
        assert item.needs_restocking() == True

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        total_value = item.get_total_value()
        assert total_value == 15 * 2.5

        print("‚úÖ Inventory item operations - PASSED")

    def test_supplier_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º"""
        address = Address("Supplier St", "Supplier City", "54321")
        supplier = Supplier(1, "Test Supplier", "John Doe", "+999999999",
                            "john@supplier.com", address)

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        supplier.add_supplied_item("Flour")
        supplier.add_supplied_item("Sugar")
        assert "Flour" in supplier.supplied_items
        assert "Sugar" in supplier.supplied_items

        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        supplier.update_rating(4.7)
        assert supplier.rating == 4.7

        print("‚úÖ Supplier operations - PASSED")

    def test_ingredient_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º"""
        ingredient = Ingredient(1, "Tomato", "piece", "Vegetable")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–∞
        ingredient.add_allergen("Nightshade")
        assert "Nightshade" in ingredient.allergens

        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏—â–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        ingredient.set_nutritional_info(22, 1.0, 5.0, 0.2)
        assert ingredient.nutritional_info["calories"] == 22
        assert ingredient.nutritional_info["protein"] == 1.0

        print("‚úÖ Ingredient operations - PASSED")

    def test_recipe_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–µ—Ü–µ–ø—Ç–æ–º"""
        recipe = Recipe(1, "Tomato Soup", "Cook tomatoes", 30)
        ingredient1 = Ingredient(1, "Tomato", "piece", "Vegetable")
        ingredient2 = Ingredient(2, "Onion", "piece", "Vegetable")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        recipe.add_ingredient(ingredient1, 4.0)  # 4 tomatoes
        recipe.add_ingredient(ingredient2, 1.0)  # 1 onion
        assert len(recipe.ingredients) == 2

        print("‚úÖ Recipe operations - PASSED")

    def test_equipment_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º"""
        equipment = CookingEquipment(1, "Oven", "Baking", "operational")

        # –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        equipment.schedule_maintenance("2024-02-01")
        assert equipment.next_maintenance == "2024-02-01"

        # –¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        equipment.mark_maintenance_completed()
        assert equipment.status == "operational"
        assert equipment.last_maintenance is not None

        print("‚úÖ Equipment operations - PASSED")

    def test_kitchen_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—É—Ö–Ω–µ–π"""
        kitchen = Kitchen(1, "Test Kitchen", "Ground Floor")
        chef = Chef(1, "Test Chef", "+111111111", "chef@test.com",
                    50000, "2024-01-01", "Italian", 5)

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        kitchen.add_equipment("Oven")
        kitchen.add_equipment("Stove")
        assert "Oven" in kitchen.equipment
        assert "Stove" in kitchen.equipment

        # –¢–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∫—É—Ö–Ω–∏
        kitchen.close_kitchen()
        assert kitchen.is_open == False

        kitchen.open_kitchen()
        assert kitchen.is_open == True

        print("‚úÖ Kitchen operations - PASSED")


if __name__ == "__main__":
    test_instance = TestInventoryModules()

    test_methods = [method for method in dir(test_instance)
                    if method.startswith('test_') and callable(getattr(test_instance, method))]

    for method_name in sorted(test_methods):
        try:
            method = getattr(test_instance, method_name)
            method()
            print(f"üéØ {method_name} - PASSED")
        except Exception as e:
            print(f"‚ùå {method_name} - FAILED: {str(e)}")