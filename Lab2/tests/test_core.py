"""
–¢–µ—Å—Ç—ã –¥–ª—è core –º–æ–¥—É–ª–µ–π
"""

import sys
import os

sys.path.insert(0, os.path.abspath('..'))

from core.restaurant import Restaurant
from core.customer import Customer
from core.employee import Chef, Waiter, Manager
from core.menu import Menu, MenuItem, MenuCategory
from core.order import Order, OrderItem
from core.table import Table
from support.address import Address
from exceptions.restaurant_exceptions import CustomerException, OrderException, EmployeeException


class TestCoreModules:
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π core"""

    def test_customer_loyalty_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é –∫–ª–∏–µ–Ω—Ç–∞"""
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
        customer.add_loyalty_points(50)
        assert customer.loyalty_points == 50

        # –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
        customer.use_loyalty_points(30)
        assert customer.loyalty_points == 20

        # –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –±–∞–ª–ª–æ–≤
        try:
            customer.use_loyalty_points(30)
            assert False, "Should have raised CustomerException"
        except CustomerException:
            pass

        # –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –±–∞–ª–ª–∞—Ö
        try:
            customer.add_loyalty_points(-10)
            assert False, "Should have raised CustomerException"
        except CustomerException:
            pass

        print("‚úÖ Customer loyalty operations - PASSED")

    def test_employee_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        # –¢–µ—Å—Ç —à–µ—Ñ–∞
        chef = Chef(1, "Test Chef", "+111111111", "chef@test.com",
                    50000, "2024-01-01", "Italian", 5)
        assert chef.position == "Chef"
        assert chef.specialty == "Italian"

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        chef.add_certification("Food Safety")
        assert "Food Safety" in chef.certifications

        # –¢–µ—Å—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
        waiter = Waiter(2, "Test Waiter", "+222222222", "waiter@test.com",
                        30000, "2024-01-01", "Main Hall")
        waiter.add_tip(10.0)
        assert waiter.tips_collected == 10.0

        print("‚úÖ Employee functionality - PASSED")

    def test_menu_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–µ–Ω—é"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
        menu_item = MenuItem(1, "Test Pizza", "Delicious pizza", 15.99,
                             "Main Course", 20, 800)

        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
        menu_item.update_price(17.99)
        assert menu_item.price == 17.99

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–ª–µ—Ä–≥–µ–Ω–∞
        menu_item.add_allergen("Gluten")
        menu_item.add_allergen("Dairy")
        assert "Gluten" in menu_item.allergens
        assert "Dairy" in menu_item.allergens

        # –¢–µ—Å—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        menu_item.increment_popularity()
        assert menu_item.popularity_score == 1

        print("‚úÖ Menu operations - PASSED")

    def test_order_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏"""
        customer = Customer(1, "Test Customer", "+123456789", "test@test.com")
        order = Order(1, customer)

        menu_item1 = MenuItem(1, "Burger", "Tasty burger", 12.99, "Main", 15)
        menu_item2 = MenuItem(2, "Fries", "Crispy fries", 4.99, "Side", 5)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑
        order_item1 = OrderItem(menu_item1, 2)
        order_item2 = OrderItem(menu_item2, 1)

        order.add_item(order_item1)
        order.add_item(order_item2)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        expected_total = (12.99 * 2) + 4.99
        assert order.calculate_total() == expected_total
        assert order.total_amount == expected_total

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞–µ–≤—ã—Ö
        order.add_tip(5.0)
        assert order.tip_amount == 5.0

        # –¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–±—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ
        order.mark_as_served()
        assert order.status == "served"

        print("‚úÖ Order operations - PASSED")

    def test_table_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç–æ–ª–∞–º–∏"""
        table = Table(1, 4, "Window")

        # –¢–µ—Å—Ç –∑–∞–Ω—è—Ç–∏—è —Å—Ç–æ–ª–∞
        table.occupy_table()
        assert table.is_occupied == True

        # –¢–µ—Å—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ç–æ–ª–∞
        table.free_table()
        assert table.is_occupied == False
        assert table.cleanliness_status == "needs_cleaning"

        # –¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ —á–∏—Å—Ç–æ–≥–æ
        table.mark_cleaned()
        assert table.cleanliness_status == "clean"

        print("‚úÖ Table operations - PASSED")


if __name__ == "__main__":
    test_instance = TestCoreModules()

    test_methods = [method for method in dir(test_instance)
                    if method.startswith('test_') and callable(getattr(test_instance, method))]

    for method_name in sorted(test_methods):
        try:
            method = getattr(test_instance, method_name)
            method()
            print(f"üéØ {method_name} - PASSED")
        except Exception as e:
            print(f"‚ùå {method_name} - FAILED: {str(e)}")